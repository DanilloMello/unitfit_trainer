// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"
)

const createWorkout = `-- name: CreateWorkout :one
INSERT INTO workouts (name) VALUES($1) RETURNING id, name
`

func (q *Queries) CreateWorkout(ctx context.Context, name string) (Workout, error) {
	row := q.db.QueryRow(ctx, createWorkout, name)
	var i Workout
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getWorkout = `-- name: GetWorkout :one
SELECT id, name FROM workouts WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWorkout(ctx context.Context, id int64) (Workout, error) {
	row := q.db.QueryRow(ctx, getWorkout, id)
	var i Workout
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listWorkouts = `-- name: ListWorkouts :many
SELECT id, name FROM workouts ORDER BY name
`

func (q *Queries) ListWorkouts(ctx context.Context) ([]Workout, error) {
	rows, err := q.db.Query(ctx, listWorkouts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workout
	for rows.Next() {
		var i Workout
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
